#!/usr/bin/env bash

<%-
  require 'pathname'

  # The list of Julia installations that LMod knows about
  # @returns [[major_minor_version, "lmod_load_string"], ["0.6", "julia/0.6.4"]]
  def get_lmod_julia_versions
      [
        ["0.5", "0.5.1"],
        ["0.6", "0.6.4"],
        ["1.0", "1.0.5"],
        ["1.1", "1.1.1"],
        ["1.3", "1.3.1"]
      ]
  end

  # @returns [[major_minor_version, kernel_version], ["1.0", "1.20.0"]]
  def get_active_user_ijulia_kernel_versions
      user_julia_envs = Pathname.new("~/.julia/environments/").expand_path

      if ! user_julia_envs.exist?
          []
      else
          user_julia_envs.children.select do |child|
              child.directory? && child.to_s.match?(/v\d+\.\d+/) && child.join('Manifest.toml').exist?
          end.map do |child|
              [
                  child.basename.to_s.gsub('v', ''),
                  child.join('Manifest.toml').read.match(/\[\[IJulia\]\].+?version\s*=\s*"(?<version>\d+\.\d+\.\d+)"\n/m)
              ]
          end.select do |pair|
              pair[-1]
          end.map do |pair|
              pair[-1] = pair[-1][:version]
              pair
          end
      end
  end

  # @returns [[kernel_version, path_to_kernel], ["1.19.0", #<Pathname:/users/PZS0710/zyou/.julia/packages/IJulia/cwvsj/src/kernel.jl>]]
  def get_installed_user_ijulia_kernels
      ijulia_installation_root = Pathname.new("~/.julia/packages/IJulia").expand_path

      if ! ijulia_installation_root.exist?
          []
      else
          ijulia_installation_root.children.select do |child|
              child.join('Project.toml').exist?
          end.map do |child|
              [
                  child.join('Project.toml').read.match(/version\s*=\s*"(?<version>\d+\.\d+\.\d+)"/)[:version],
                  child.join('src/kernel.jl').to_s
              ]
          end
      end
  end

  def kernel_hash(
      cuda:, installation:, lmod_version:, wrapper:
  )
      {
        display_name: "User Defined Julia #{lmod_version}" + ((cuda.empty?) ? "" : " [#{cuda}]"),
        language: "julia",
        argv: [
          wrapper,
          "julia",
          "-i",
          "--startup-file=yes",
          "--color=yes",
          installation,
          "{connection_file}"
        ],
        env: {
          MODULES: "xalt/latest julia/#{lmod_version} #{cuda}"
        }
      }
  end

  cuda = (context.node_type == "gpu") ? context.cuda_version : ""
  wrapper = session.staged_root.join("launch_wrapper.sh")
  wrapper_log = session.staged_root.join("launch_wrapper.log")

  kernels = { }.tap do |hsh|
    # Any existing Julia kernelspec may be clobbered if the user has their own version of that kernel installed
    lmod_julia_versions = Hash[get_lmod_julia_versions]
    installed_user_ijulia_kernels = Hash[get_installed_user_ijulia_kernels]

    get_active_user_ijulia_kernel_versions.each do |maj_min_ver, kernel_version|
        lmod_version = lmod_julia_versions[maj_min_ver]

        next unless lmod_version
        next unless installed_user_ijulia_kernels[kernel_version]

        hsh["julia#{lmod_version.gsub('.', '')}".to_sym] = kernel_hash(
            cuda: cuda,
            installation: installed_user_ijulia_kernels[kernel_version],
            lmod_version: lmod_version,
            wrapper: wrapper
        )
    end
  end
-%>

echo "Starting main script..."
echo "TTT - $(date)"

#
# Start Jupyter server
#
# Clean the environment
module purge

# Create launcher wrapper
echo "Creating launcher wrapper script..."
(
umask 077
sed 's/^ \{2\}//' > "<%= wrapper %>" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  exec &>>"<%= wrapper_log %>"

  # Load the required environment
  module purge
  module load xalt/latest \${MODULES}
  module list

  # Launch the original command
  set -x
  exec "\${@}"
EOL
)
chmod 700 "<%= wrapper %>"
echo "TTT - $(date)"

# Create custom Jupyter kernels
echo "Creating custom Jupyter kernels..."
export JUPYTER_PATH="${PWD}/share/jupyter"
<%- kernels.each do |name, kernel| -%>
<%- path = "${JUPYTER_PATH}/kernels/sys_#{name}" -%>
mkdir -p "<%= path %>"
cp "${PWD}/assets/<%= name.to_s.gsub(/\d/, "") %>"/* "<%= path %>/."
(
umask 077
cat > "<%= path %>/kernel.json" << EOL
<%= JSON.pretty_generate kernel %>
EOL
)
<%- end -%>
echo "TTT - $(date)"

# Create user-created Conda env Jupyter kernels
echo "Creating custom Jupyter kernels from user-created Conda environments..."
for dir in "${HOME}/.conda/envs"/*/ "${HOME}/envs"/*/ ; do
  (
  umask 077
  set -e
  KERNEL_NAME="$(basename "${dir}")"
  KERNEL_PATH="~${dir#${HOME}}"
  [[ -x "${dir}bin/activate" ]] || exit 0
  echo "Creating kernel for ${dir}..."
  source "${dir}bin/activate" "${dir}"
  set -x
  if [[ "$(conda list -f --json ipykernel)" == "[]" ]]; then
    CONDA_PKGS_DIRS="$(mktemp -d)" conda install --yes --quiet --no-update-deps ipykernel
  fi
  python \
    -m ipykernel \
      install \
      --name "conda_${KERNEL_NAME}" \
      --display-name "${KERNEL_NAME} [${KERNEL_PATH}]" \
      --prefix "${PWD}"
  ) &
done
wait
echo "TTT - $(date)"

# Set working directory to notebook root directory
cd "${NOTEBOOK_ROOT}"

# Setup Jupyter environment
module use $MODULEPATH_ROOT/project/ondemand
#module load miniconda3/4.7.12.1-gcc-4.8.5
export PATH=/lustre/opt/cascadelake/linux-centos7-x86_64/gcc-4.8.5/miniconda3-4.7.12.1-dgxc6tgp3mzrwwdd6dnbzuugfohkn4pb/bin:$PATH
module load xalt/latest <%= context.version %>
module list
echo "TTT - $(date)"

# List available kernels for debugging purposes
set -x
jupyter kernelspec list
{ set +x; } 2>/dev/null
echo "TTT - $(date)"

# Launch the Jupyter server
set -x
jupyter <%= context.jupyterlab_switch == "1" ? "lab" : "notebook" %> --config="${CONFIG_FILE}"
